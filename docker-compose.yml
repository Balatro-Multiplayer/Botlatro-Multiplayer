services:
  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nkqueue
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nkqueue || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20

  migrate:
    build: .
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/nkqueue
    depends_on:
      db:
        condition: service_healthy
    command: npx node-pg-migrate up
    restart: "no"

  seed-settings:
    image: postgres:16
    depends_on:
      migrate:
        condition: service_completed_successfully
    environment:
      PGPASSWORD: postgres
    restart: "no"
    command: >
      bash -lc "
      psql -h db -U postgres -d nkqueue -v ON_ERROR_STOP=1 -c
      \"insert into settings
         (singleton, queue_category_id, helper_role_id, decay_threshold, decay_amount, decay_interval, decay_grace, match_count_channel_id)
       select true,
              ''::varchar,
              ''::varchar,
              1000, 25, 24, 6, ''::text
       where not exists (select 1 from settings where singleton = true);\""

  bot:
    build: .
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/nkqueue
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      CLIENT_ID: ${CLIENT_ID}
      GUILD_ID: ${GUILD_ID}
      LOG_DIR: /app/data/logs
    depends_on:
      seed-settings:
        condition: service_completed_successfully
    command: bash -lc "exec node dist/index.js"
    volumes:
      - botlogs:/app/data/logs
    restart: unless-stopped

volumes:
  pgdata: {}
  botlogs: {}
